# Git terminológia
1. Working directory -> A projekt mappája, ahol a projekt minden erőforrása megtalálható (Nem biztos, hogy a git az összesről tud/követi)
2. Staging area -> Köztes terület, ahol a git által követett erőforrások változásai rögzítve vannak, de azok még nincsenek véglegesítve (commit-olva)
3. Repository -> a working directoryban található .git rejtett mappa ahol az összes commit és változás számon van tartva
4. Branch -> commiteket tartalmazó tároló, melyeket időrendben tart számon (az alapértelmezett branch a master lokálisan viszont main githubon - nemrégi változtatás)
5. Remote -> távoli git fájlszerver, ahova a lokális repository-t feltöltjük (push-oljuk)

# Alap (lokális) git configurálás
git config --global user.name "<username>" 	-> Név megadása
git config --global user.email "<email>"	 	-> Email megadása

# Terminál színezés engedélyezése 
git config --global color.ui true  	-> nem kötelező

# Lokális adatok ellenőrzése
git config --global --list

# Lokális git repo létrehozása
git init <mappanév> 	-> a mappanév opcionális, ha nem adjuk meg akkor a jelenlegi mappában hozza létre a repo-t ahonnan a parancsot kiadtuk

# Lokális repo létrehozása előre definiált alapértelmezett branch-el 
git init -b <alapértelmezett_branch_neve> <projekt_mappa_neve>

# Lokális master branch átnevezése (pl. main-re, hogy githubbal is működjön)
git branch -m (vagy -M) master main 	-> <mit> <mire> ha nem adjuk meg, hogy mit akkor alapértelmezetten is a master branch-et fogja átnevezni

# Remote repository letöltése (klónozása)
git clone <link> 	-> HTTPS és SSH protokollal egyaránt

# Working directory és staging area állapotának listázása
git status

# Fájlok hozzáadása a staging area-hoz (a working directory-ban lévő fájlok közül)
git add <fájlnév>
git add . 		-> az összes WD-ban található fájl hozzáadása ami eddig nem volt követve
				-> ha az előző commit óta nem hoztunk létre újabb fájlokat csak a meglévőlben módosítottunk, akkor nem kötelező használni -> használhatjuk a commit parancsot közvetlenül a -a kapcsolóval -> git commit -am "<commit_üzenet>"

# A staging area-ban várakozó változások (lokális) repository-ba mentése
git commit -m "<commit_üzenet>"

# Commit üzenet utólagos javítása
git commit --amend

# Lokális repository remote-ra való feltöltése
git push origin main 	-> origin a remote repo-t alias main-el pedig azt adjuk meg, hogy melyik branch-be szeretnénk pusholni 
						-> az első push utasítás után a rendszer megjegyzi a paramétereket és a továbbiakban már egyszerűen a git push parancsal is tudunk dolgozni

# Remote repo összekapcsolása a lokálissal
git remote add origin <link>	-> az origin az alias amire később hivatkozhatunk
								-> HTTPS és SSH esetén és egyaránt

# Az alapértelmezett branch globális átnevezése (lokális repon)
git config --global init.defaultBranch main

# Lokális repo frissítás remote repo alapján
git pull (origin) (main)	-> lsd. git push 

# Track-elt elemek listázása
git ls-files 

# Fájl eltávolítása a staging area-ból (miután véletlenül git add-al már hozzáadtuk) [UNSTAGING]
git reset HEAD <fájlnév>

# Utolsó commit utáni (fájltartalom) változások eldobása
git checkout -- <fájlnév>

# Fájl átnevezése (lsd. bash)
git mv <mit> <mire>

# Ha oprendszer szinten nevezzük át azt a git 2 operációnak látja, ilyenkor a -A kapcsolóval érdemes add-olni (rekurzív hozzáadás)
git add -A 

# Fájl áthelyezés (lsd. bash) 
git mv <mit> <hova>

# Fájl törlése (lsd. bash) - ha track-elve van 
git rm <fájlnév>

# Git naplózás listázása [git help log]
git log (--all) (--graph) (--decorate) (--oneline)
git log ae6f872...761b444d		-> range listázása
git log --since="3 days ago"	-> dátum alapú keresés
git log -- <fájlnév>			-> fájlra szűrés

# Commit info listázása
git show <commit_id>

# Alias létrehozása
git config --global alias.hist "log --all --graph --decorate --oneline"		-> hist alias regisztrálása, értéknél a git kulcsszót nem szabad kitenni
~/.gitconfig fájlban tárolódik 

# Fájlok ignorálása
.gitignore fájlt kell létrehoznunk a project mappában
Megadhatunk benne specifikus fájlt -> MyFile.ext
egész kiterjesztést		   -> *.ext
mappát				   -> my-folder/
UNIX filepath! Windows alatt is!

# Working directory és Staging are összehasonlítása
git diff

# Változások megjelenítése grafikus git kliensen (ha telepítettünk)
git diff tool

# Working directory és az utolsó commit összehasonlítása (a jelenlegi branch-en)
git diff HEAD

# Staging Area és a Repository (lokális) összehasonlítása
git diff --staged HEAD 
git difftool --staged HEAD

# Összehasonlítás 1 fájlra szűkítése
git diff -- <fájlnév>
git difftool -- <fájlnév>

# Commit-ok összehasonlítása
git diff <commit_id> <commit_id> (vagy HEAD)
git diff HEAD HEAD^	-> az utolsó és utolsó előtti commit-ot hasonlítja össze 

# Lokális és remote repo összehasonlítása (main branch)
git diff main origin/main
git difftool main origin/main

# Lokális branch-ek listázása
git branch

# Branch-ek összehasonlítása
git diff <branch-1> <branch-2>

# Branch-ek listázása (lokál és remote branch-ek)
git branch -a

# Új branch létrehozása
git branch <branch_neve>

# Branch váltása 
git checkout <branch_amire_váltunk>

# Branch átnevezése
git branch -m <mit> <mire>

# Branch törlése
git branch -d <mit>

# Branch létrehozása és váltás egy paranccsal
git checkout -b <új_branch_neve>

# Branch-ek merge-elése
git merge <melyik_branchet_akarom_beolvasztani_abba_amelyikbe_jelenleg_vagyok>

# Fast-forward merge tiltása
git merge <melyik_branchet_akarom_beolvasztani_abba_amelyikbe_jelenleg_vagyok> --no-ff

# Automatikus merge (main branch-en vannak köztes commit-ok az elágazás után)
git merge <melyik_branchet_akarom_beolvasztani_abba_amelyikbe_jelenleg_vagyok> -m "<commit_szöveg"

# Merge konfliktusok (kézzel és tool-lal is megoldható)
git mergetool		-> megadjuk soronként melyik a valid aztán merge a megszokott módon
			-> .orig fájl backup amit git automatikusan generál a merge konfliktus alapján

# Rebase - feltöltjük a forrás branch elágazás után commit-jeit a a branchünk-be (frissítjük a branch-ünk alapját)
git rebase main (a rebase alapját adó branch-be be kell lépnünk)

# Rebase visszavonása
git rebase --abort

# Rebase remote repo alapján
git fetch origin main

# Rebase remote repo alapján lokális prio-val
git pull --rebase origin main

# Stash-elés
git stash (save)

# Stash feloldása
git stash apply

# Az előző 2 összevonva (apply és az utolsó stash törlése)
git stash pop 

# Stash listázása
git stash list 

# Stash ürítése
git stash drop

# Nem track-elt fájlok stash-elése
git stash -u 

# Több stash menedzselése
git stash save "<stash_üzenet>"
git stash show stash@{index}
git stash apply stash@{index}

# Összes stash eldobása
git stash clear

# Stash áthelyezése új branch-re 
git stash -u 
git stash branch <uj_branch_neve>

# Lightweight Tage-elés
git tag <tag_neve>

# Tag-ek listázása
git tag --list

# Tag-ekre ezután hivatkozhatunk 
git show <tag_név>

# Tag törlése 
git tag --delete <tag_név>

# Annotált tag-elés
git tag -a <tag_név>
git tag <tag_név> -m "<tag_szöveg>"

# Tag-ek összehasonlítása
git diff <egyik_tag> <masik_tag>

# Visszamenőleges tag-elés
git tag -a <tag_név> <commit_hash>

# Tag-ek frissítése
git tag -a <tag_név> -f <korrekt_commit_id>

# Tag-ek használata githubbal
git push origin <tag_neve>	-> nem csak a tag-eket pusholjuk, hanem a hozzá tartozó commitokat is 
git push origin master --tags

# Tag törlése githubról
git push origin :<tag_név>	-> ne pusholj SEMMIT ehhez a tag-névhez

# Előző commit-ra visszaállás
git reset HEAD^1 VAGY
git reset HEAD@{2} VAGY
git reset <commit_hash>

# Parancsok logolása
git reflog

# Mixed reset, Hard reset, Soft reset
git reset HEAD	-> Mixed

